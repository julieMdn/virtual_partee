generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement()) @map("user_id")
  username  String    @unique @map("user_name")
  email     String    @unique @map("user_email")
  password  String    @map("user_password")
  firstName String    @map("user_firstname")
  lastName  String    @map("user_lastname")
  createdAt DateTime  @default(now()) @map("user_created_at")
  role      String    @default("user") @map("user_role")
  birthday  DateTime  @map("user_birthday")
  bookings  Booking[]
  scores    Score[]
  addresses Address[] @relation("AddressToUser")
}

model Address {
  id          Int    @id @default(autoincrement()) @map("address_id")
  street      String @map("address_street")
  city        String @map("address_city")
  postCode    String @map("address_post_code")
  country     String @map("address_country")
  phoneNumber String @map("phone_number")
  type        String @default("billing") @map("address_type")
  users       User[] @relation("AddressToUser")
}

model Offer {
  id          Int       @id @default(autoincrement()) @map("offer_id")
  title       String    @map("offer_title")
  description String    @map("offer_description") @db.MediumText
  price       Float     @map("offer_price")
  picture     String    @map("offer_picture")
  createdAt   DateTime  @default(now()) @map("offer_created_at")
  duration    Int       @default(60)
  bookings    Booking[]
}

model TimeSlot {
  date        DateTime
  endTime     DateTime
  id          Int      @id @default(autoincrement())
  isAvailable Boolean  @default(false)
  startTime   DateTime
  bookings    Booking?
}

model Booking {
  id              Int      @id @default(autoincrement()) @map("booking_id")
  status          String   @default("pending") @map("booking_status")
  offerId         Int      @map("offer_id")
  timeSlotId      Int      @unique @map("time_slot_id")
  paymentId       Int?     @map("payment_id")
  userId          Int      @map("user_id")
  stripeSessionId String?  @map("stripe_session_id")
  createdAt       DateTime @default(now()) @map("created_at")
  offer           Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  payment         Payment? @relation(fields: [paymentId], references: [id])
  timeSlot        TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([offerId])
  @@index([timeSlotId])
  @@index([paymentId])
}

model Payment {
  id        Int       @id @default(autoincrement()) @map("payment_id")
  date      DateTime  @default(now()) @map("payment_date")
  amount    Float     @map("payment_amount")
  tvaAmount Float     @map("tva_amount")
  status    String    @default("pending") @map("payment_status")
  bookings  Booking[]

  @@index([id])
}

model Score {
  id     Int      @id @default(autoincrement()) @map("score_id")
  value  Int      @map("score_value")
  date   DateTime @default(now()) @map("score_date")
  userId Int      @map("user_id")
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model OpeningHours {
  afternoonEnd   DateTime
  afternoonStart DateTime
  dayOfWeek      String
  id             Int      @id @default(autoincrement())
  morningEnd     DateTime
  morningStart   DateTime
}
